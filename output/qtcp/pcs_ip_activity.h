/******************************************************************************
 *                            pcs_ip_activity.h
 *
 * Generated by QCG in January, 28, 2019 at 13:54:45
 *           on system: raspberrypi (Linux 4.14.79-v7+ armv7l)
 *
 * User: QSDL
 *
 * Copyright (C) 1995-98 Marc Diefenbruch (md@informatik.uni-essen.de)
 *                and Joerg Ruehl (jruehl@informatik.uni-essen.de)
 *
 * All rights reserved.
 *
 *****************************************************************************/

#ifndef _PCS_IP_ACTIVITY_H_
#define _PCS_IP_ACTIVITY_H_

/******************************************************************************
 * Includes
 *****************************************************************************/

#include "blk_ip.h"

#include <SCL/SCProcess.h>
#include <SCL/SCStateType.h>
#include <SCL/SCTimerType.h>
#include <SCL/SCProcedureType.h>

/******************************************************************************
 * Prozessklasse des SDL-Prozesses 'activity' (Data)
 *****************************************************************************/

class pcs_ip_activity_data : public blk_ip
{
  public:
    /**************************************************************************
     * Initialisierungsfunktion des Prozesses (statisch)
     *************************************************************************/

    static SCBoolean Initialize(void);

    /**************************************************************************
     * Beendigungsfunktion des Prozesses (statisch)
     *************************************************************************/

    static void Finish(void);

    /**************************************************************************
     * Konstruktor
     *************************************************************************/

    pcs_ip_activity_data(void);

    /**************************************************************************
     * Destruktor
     *************************************************************************/

    ~pcs_ip_activity_data(void);

    /**************************************************************************
     * Prozedurtypen (statisch)
     *************************************************************************/


    /**************************************************************************
     * IDs der Prozedurtypen
     *************************************************************************/

    enum
    {
      pcd_type_id_deliver = kSCProcedureTypeIDBase + 20,
      pcd_type_id_sendpacket
    };

    /**************************************************************************
     * Strukturen fuer die formalen Parameter der Prozeduren
     *************************************************************************/


    /**************************************************************************
     * Variablen fuer die formalen Parameter der Prozeduren
     *************************************************************************/


};

/******************************************************************************
 * Prozessklasse des SDL-Prozesses 'activity' (Instanz)
 *****************************************************************************/

class pcs_ip_activity : public SCProcess, public pcs_ip_activity_data
{
  public:
    /**************************************************************************
     * Initialisierungsfunktion des Prozesses (statisch)
     *************************************************************************/

    static SCBoolean Initialize(void);

    /**************************************************************************
     * Beendigungsfunktion des Prozesses (statisch)
     *************************************************************************/

    static void Finish(void);

    /**************************************************************************
     * Konstruktoren
     *************************************************************************/

    pcs_ip_activity(const SCProcessID, const SCProcessType *);
    pcs_ip_activity(SCMem &);

    /**************************************************************************
     * Destruktor
     *************************************************************************/

    ~pcs_ip_activity(void);

    /**************************************************************************
     * Prototypen fuer die Prozeduren
     *************************************************************************/

    void deliver(DataType_ip);
    void sendpacket(DataType_tcp);

    /**************************************************************************
     * Virtuelle Save- & Restore-Methoden
     *************************************************************************/

    SCBoolean Save(SCMem &) const;
    SCBoolean Restore(SCMem &);

    /**************************************************************************
     * Virtuelle Size-Methode
     *************************************************************************/

    void Size(SCSize *) const;

    /**************************************************************************
     * Display-Methoden
     *************************************************************************/

    friend SCStream& operator<<(SCStream &, const pcs_ip_activity &);

    /**************************************************************************
     * Implementierungsmethode
     *************************************************************************/

    void Body(void);

    /**************************************************************************
     * Lokale Variablen des Prozesses
     *************************************************************************/

    DataType_tcp v_tcp_in;
    DataType_ip v_ip_in;

    /**************************************************************************
     * IDs der Zustandstypen des Prozesses
     *************************************************************************/

    enum
    {
      state_type_id_start = kSCStateTypeIDBase + 30,
      state_type_id_waitforinput
    };

    /**************************************************************************
     * Zustandstypen des Prozesses (statisch)
     *************************************************************************/

    static SCStateType * state_type_start;
    static SCStateType * state_type_waitforinput;

    /**************************************************************************
     * Input-Sets der Transitionen des Prozesses (statisch)
     *************************************************************************/

    static SCSignalID input_set_waitforinput_transition0[];
    static SCSignalID input_set_waitforinput_transition1[];

    /**************************************************************************
     * Standardvariablen zur Prozesssteuerung
     *************************************************************************/

    SCInteger v_cur_state;
    SCInteger v_transition_id;
    SCTransition *v_transition;
    SCSignalType *v_signal_read;

    /**************************************************************************
     * Friend-Deklarationen fuer Prozeduren
     *************************************************************************/

};

#endif
