/******************************************************************************
 *                            blk_application.h
 *
 * Generated by QCG in January, 28, 2019 at 13:54:45
 *           on system: raspberrypi (Linux 4.14.79-v7+ armv7l)
 *
 * User: QSDL
 *
 * Copyright (C) 1995-98 Marc Diefenbruch (md@informatik.uni-essen.de)
 *                and Joerg Ruehl (jruehl@informatik.uni-essen.de)
 *
 * All rights reserved.
 *
 *****************************************************************************/

#ifndef _BLK_APPLICATION_H_
#define _BLK_APPLICATION_H_

/******************************************************************************
 * Includes
 *****************************************************************************/

#include "sys_qtcp.h"

#include <SCL/SCProcessType.h>

/******************************************************************************
 * SDL-Blockklasse
 *****************************************************************************/

class blk_application : protected sys_qtcp
{
  public:
    /**************************************************************************
     * Initialisierungsfunktion (statisch)
     *************************************************************************/

    static SCBoolean Initialize(void);

    /**************************************************************************
     * Beendigungsfunktion (statisch)
     *************************************************************************/

    static void Finish(void);

    /**************************************************************************
     * Prozesstypen (statisch)
     *************************************************************************/

    class PcsType_loadgenerator: public SCProcessType
    {
      public:
        PcsType_loadgenerator(SCNatural type_key, const char *type_name,
                              SCInteger max_processes, SCNatural input_queue_length) :
          SCProcessType(type_key, type_name, max_processes, input_queue_length)
        {
        }
        SCProcess *NewInstance(const SCProcessID creatorID = kSCNoProcessID,
                               SCDataType *actual_params = NULL) const;
        SCProcess *NewInstance(SCMem &save_area) const;
    };
    static PcsType_loadgenerator * pcs_type_loadgenerator;
    class PcsType_applicationmanager: public SCProcessType
    {
      public:
        PcsType_applicationmanager(SCNatural type_key, const char *type_name,
                                   SCInteger max_processes,
                                   SCNatural input_queue_length) :
          SCProcessType(type_key, type_name, max_processes, input_queue_length)
        {
        }
        SCProcess *NewInstance(const SCProcessID creatorID = kSCNoProcessID,
                               SCDataType *actual_params = NULL) const;
        SCProcess *NewInstance(SCMem &save_area) const;
    };
    static PcsType_applicationmanager * pcs_type_applicationmanager;

    /**************************************************************************
     * Konstruktor
     *************************************************************************/

    blk_application(void);

    /**************************************************************************
     * Destruktor
     *************************************************************************/

    ~blk_application(void);

    /**************************************************************************
     * IDs der Prozesstypen
     *************************************************************************/

    enum
    {
      pcs_type_id_loadgenerator = kSCProcessTypeIDBase + 0,
      pcs_type_id_applicationmanager
    };

    /**************************************************************************
     * Strukturen fuer die formalen Parameter der Prozesse
     *************************************************************************/

    struct PcsFormalParam_loadgenerator : public SCDataType
    {
      // Default Konstruktor:
      PcsFormalParam_loadgenerator(void)
      {
        v_addr = 0;
      }
      // Copy Konstruktor:
      PcsFormalParam_loadgenerator(const PcsFormalParam_loadgenerator& orig)
      {
        *this = orig;
      }
      // Formale Prozess-Parameter:
      SCInteger v_addr;
      // Virtueller Clone-Operator:
      SCDataType *Clone(void) const
      {
        return new PcsFormalParam_loadgenerator(*this);
      }
      // Zuweisungsoperator:
      PcsFormalParam_loadgenerator& operator= (const PcsFormalParam_loadgenerator &orig)
      {
        v_addr = orig.v_addr;
        return *this;
      }
      // Vergleichsoperator:
      SCBoolean operator== (const PcsFormalParam_loadgenerator &second) const
      {
        return (v_addr == second.v_addr);
      }
      // Virtueller Vergleichssoperator:
      SCBoolean Equal(const SCDataType &second) const
      {
        return (*this == *(PcsFormalParam_loadgenerator *)&second);
      }
      // Ausgabeoperator:
      friend SCStream& operator<<(SCStream &out, const       PcsFormalParam_loadgenerator &me)
      {
        out << me.v_addr;
        return out;
      }
      // Virtueller Ausgabeoperator:
      SCStream& Display(SCStream &out) const
      {
        return (out << *this);
      }
      // Virtuelle Save-Methode:
      SCBoolean Save(SCMem &save_area) const
      {
        save_area.Store(&v_addr, sizeof(SCInteger));
        return true;
      }
      // Virtuelle Restore-Methode:
      SCBoolean Restore(SCMem &save_area)
      {
        save_area.Restore(&v_addr, sizeof(SCInteger));
        return true;
      }
    };

    /**************************************************************************
     * Variablen fuer die formalen Parameter der Prozesse
     *************************************************************************/

    PcsFormalParam_loadgenerator *pcs_formal_param_loadgenerator;

};

#endif
