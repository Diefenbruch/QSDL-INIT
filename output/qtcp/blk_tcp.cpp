/******************************************************************************
 *                            blk_tcp.cpp
 *
 * Generated by QCG in January, 28, 2019 at 13:54:45
 *           on system: raspberrypi (Linux 4.14.79-v7+ armv7l)
 *
 * User: QSDL
 *
 * Copyright (C) 1995-98 Marc Diefenbruch (md@informatik.uni-essen.de)
 *                and Joerg Ruehl (jruehl@informatik.uni-essen.de)
 *
 * All rights reserved.
 *
 *****************************************************************************/

/******************************************************************************
 * Includes
 *****************************************************************************/

#include "blk_tcp.h"
#include "pcs_tcp_manager.h"
#include "pcs_tcp_port.h"

#include <SCL/SCScheduler.h>

/******************************************************************************
 * Initialisierung der Prozesstypen und der Prozess-IDs (statisch)
 *****************************************************************************/

blk_tcp::PcsType_manager * blk_tcp::pcs_type_manager = NULL;

SCProcess *blk_tcp::PcsType_manager::NewInstance(const SCProcessID creatorID,
                                                 SCDataType *actual_params) const
{
  (void)actual_params;

  return new pcs_tcp_manager(creatorID, this);
}

SCProcess *blk_tcp::PcsType_manager::NewInstance(SCMem &save_area) const
{
  return new pcs_tcp_manager(save_area);
}

blk_tcp::PcsType_port * blk_tcp::pcs_type_port = NULL;

SCProcess *blk_tcp::PcsType_port::NewInstance(const SCProcessID creatorID,
                                              SCDataType *actual_params) const
{
  (void)actual_params;

  return new pcs_tcp_port(creatorID, this);
}

SCProcess *blk_tcp::PcsType_port::NewInstance(SCMem &save_area) const
{
  return new pcs_tcp_port(save_area);
}


/******************************************************************************
 * Initialisierungsfunktion der SDL-Blockklasse (statisch)
 *****************************************************************************/

SCBoolean blk_tcp::Initialize(void)
{
  SCBoolean result = true;

  if (SCScheduler::IsVerbose())
  {
    std::cout << "Initializing block tcp..." << std::endl;
  }

  /****************************************************************************
   * Prozesstypen initialisieren:
   ***************************************************************************/

  pcs_type_manager = new PcsType_manager(pcs_type_id_manager,
                                         "manager", 1, kSCUnlimitedQueueLength);
  pcs_type_port = new PcsType_port(pcs_type_id_port, "port",
                                   syn_max_connections, kSCUnlimitedQueueLength);

  /****************************************************************************
   * Statische Initialisierungsfunktionen der Prozesse aufrufen:
   ***************************************************************************/

  result = result & pcs_tcp_manager_data::Initialize();
  result = result & pcs_tcp_manager::Initialize();
  result = result & pcs_tcp_port_data::Initialize();
  result = result & pcs_tcp_port::Initialize();

  return result;
}

/******************************************************************************
 * Beendigungsfunktion der SDL-Blockklasse (statisch)
 *****************************************************************************/

void blk_tcp::Finish(void)
{
  /****************************************************************************
   * Prozesstypen zerstoeren:
   ***************************************************************************/

  delete pcs_type_manager;
  delete pcs_type_port;

  /****************************************************************************
   * Statische Beendigungsfunktionen der Prozesse aufrufen:
   ***************************************************************************/

  pcs_tcp_manager_data::Finish();
  pcs_tcp_manager::Finish();
  pcs_tcp_port_data::Finish();
  pcs_tcp_port::Finish();
}

/******************************************************************************
 * Konstruktor des Blocks
 *****************************************************************************/

blk_tcp::blk_tcp(void)
{
}

/******************************************************************************
 * Destruktor des Blocks
 *****************************************************************************/

blk_tcp::~blk_tcp(void)
{
}

